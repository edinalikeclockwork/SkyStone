package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import java.lang.annotation.Target;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.DcMotor;

import com.qualcomm.robotcore.hardware.DigitalChannel;

import android.graphics.Color;

/**
  *
  * TeleOp for testing Mecanum Wheels
  *   Gamepad1:  TBD
  *
  *   Gamepad2:  unused as of now
  *
  */

@TeleOp ( name = "Mecanum test - ALEX")

public class TeleOpALEX extends LinearOpMode {

    public DcMotor  LF; //Left front
    public DcMotor  RF; //Right front
    public DcMotor  LR; //Left rear
    public DcMotor  RR; //Right rear

    private ElapsedTime runtime = new ElapsedTime();
    private ElapsedTime button_x_timer = new ElapsedTime();

    @Override
    public void runOpMode () {
        LF = hardwareMap.get(DcMotor.class, "left_front");
        RF = hardwareMap.get(DcMotor.class, "right_front");
        LR = hardwareMap.get(DcMotor.class, "left_rear");
        RR = hardwareMap.get(DcMotor.class, "right_rear");

        telemetry.addData("Status", "Initialized - All Systems Go!");
        telemetry.update();

        // Wait for game to start (driver presses PLAY)
        waitForStart();
        // run until the end of the match (driver presses STOP)

        double  left = 0;
        double  right = 0;
        double  powerOffset = 1;
        double  directionSwap = -1;
        double  liftPowerInit = 0.40;
        boolean gamePadXState;
        boolean prevGamePadXState = false;
        boolean buttonXPressed = false;

        double liftPower = liftPowerInit;

        while (opModeIsActive() && true) {

            telemetry.addData("Target Power - lf", lf);
            telemetry.addData("Target Power - rf", rf);
            telemetry.addData("Target Power - lr", lr);
            telemetry.addData("Target Power - rr", rr);
            //telemetry.addData("Status", "Running");
            telemetry.update();
            
        }
    }
}
